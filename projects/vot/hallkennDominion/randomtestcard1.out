Now Testing the buyCard() function:

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403281

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403282

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403283

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403284

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403285

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403286

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403287

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403288

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403289

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403290

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403291

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403292

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403293

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403294

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403295

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403296

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403297

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403298

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403299

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403300

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403301

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403302

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403303

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403304

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403305

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403306

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403307

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403308

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403309

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403310

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403311

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403312

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403313

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403314

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403315

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403316

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403317

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403318

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403319

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403320

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403321

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403322

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403323

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403324

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403325

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403326

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403327

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403328

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403329

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403330

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403331

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403332

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403333

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403334

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403335

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403336

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403337

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403338

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403339

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403340

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403341

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403342

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403343

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403344

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403345

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403346

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403347

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403348

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403349

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403350

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403351

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403352

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403353

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403354

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403355

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403356

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403357

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403358

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403359

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403360

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403361

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403362

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403363

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403364

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403365

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403366

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403367

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403368

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403369

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403370

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403371

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403372

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403373

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403374

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403375

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403376

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403377

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403378

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403379

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403380

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403381

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403382

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403383

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403384

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403385

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403386

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403387

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403388

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403389

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403390

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403391

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403392

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403393

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403394

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403395

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403396

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403397

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403398

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403399

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403400

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403401

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403402

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403403

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403404

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403405

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403406

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403407

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403408

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403409

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403410

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403411

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403412

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403413

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403414

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403415

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403416

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403417

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403418

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403419

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403420

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403421

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403422

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403423

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403424

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403425

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403426

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403427

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403428

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403429

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403430

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403431

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403432

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403433

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403434

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403435

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403436

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403437

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403438

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403439

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403440

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403441

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403442

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403443

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403444

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403445

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403446

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403447

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403448

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403449

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403450

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403451

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403452

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403453

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403454

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403455

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403456

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403457

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403458

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403459

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403460

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403461

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403462

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403463

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403464

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403465

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403466

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403467

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403468

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403469

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403470

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403471

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403472

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403473

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403474

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403475

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403476

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403477

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403478

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403479

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403480

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403481

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403482

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403483

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403484

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403485

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403486

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403487

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403488

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403489

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403490

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403491

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403492

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403493

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403494

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403495

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403496

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403497

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403498

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403499

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403500

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403501

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403502

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403503

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403504

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403505

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403506

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403507

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403508

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403509

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403510

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403511

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403512

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403513

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403514

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403515

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403516

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403517

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403518

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403519

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403520

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403521

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403522

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403523

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403524

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403525

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403526

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403527

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403528

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403529

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403530

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403531

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403532

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403533

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403534

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403535

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403536

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403537

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403538

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403539

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403540

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403541

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403542

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403543

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403544

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403545

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403546

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403547

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403548

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403549

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403550

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403551

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403552

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403553

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403554

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403555

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403556

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403557

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403558

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403559

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403560

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403561

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403562

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403563

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403564

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403565

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403566

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403567

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403568

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403569

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403570

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403571

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403572

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403573

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403574

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403575

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403576

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403577

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403578

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403579

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403580

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403581

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403582

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403583

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403584

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403585

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403586

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403587

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403588

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403589

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403590

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403591

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403592

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403593

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403594

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403595

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403596

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403597

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403598

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403599

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403600

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403601

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403602

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403603

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403604

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403605

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403606

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403607

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403608

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403609

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403610

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403611

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403612

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403613

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403614

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403615

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403616

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403617

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403618

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403619

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403620

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403621

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403622

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403623

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403624

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403625

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403626

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403627

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403628

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403629

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403630

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403631

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403632

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403633

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403634

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403635

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403636

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403637

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403638

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403639

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403640

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403641

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403642

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403643

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403644

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403645

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403646

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403647

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403648

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403649

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403650

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403651

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403652

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403653

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403654

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403655

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403656

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403657

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403658

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403659

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403660

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403661

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403662

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403663

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403664

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403665

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403666

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403667

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403668

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403669

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403670

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403671

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403672

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403673

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403674

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403675

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403676

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403677

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403678

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403679

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403680

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403681

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403682

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403683

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403684

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403685

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403686

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403687

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403688

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403689

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403690

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403691

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403692

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403693

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403694

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403695

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403696

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403697

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403698

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403699

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403700

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403701

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403702

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403703

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403704

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403705

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403706

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403707

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403708

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403709

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403710

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403711

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403712

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403713

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403714

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403715

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403716

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403717

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403718

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403719

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403720

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403721

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403722

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403723

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403724

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403725

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403726

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403727

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403728

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403729

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403730

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403731

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403732

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403733

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403734

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403735

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403736

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403737

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403738

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403739

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403740

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403741

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403742

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403743

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403744

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403745

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403746

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403747

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403748

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403749

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403750

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403751

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403752

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403753

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403754

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403755

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403756

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403757

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403758

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403759

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403760

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403761

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403762

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403763

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403764

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403765

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403766

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403767

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403768

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403769

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403770

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403771

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403772

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403773

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403774

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403775

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403776

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403777

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403778

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403779

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403780

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403781

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403782

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403783

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403784

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403785

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403786

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403787

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403788

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403789

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403790

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403791

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403792

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403793

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403794

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403795

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403796

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403797

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403798

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403799

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403800

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403801

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403802

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403803

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403804

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403805

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403806

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403807

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403808

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403809

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403810

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403811

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403812

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403813

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403814

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403815

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403816

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403817

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403818

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403819

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403820

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403821

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403822

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403823

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403824

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403825

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403826

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403827

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403828

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403829

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403830

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403831

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403832

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403833

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403834

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403835

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403836

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403837

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403838

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403839

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403840

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403841

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403842

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403843

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403844

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403845

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403846

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403847

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403848

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403849

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403850

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403851

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403852

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403853

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403854

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403855

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403856

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403857

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403858

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403859

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403860

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403861

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403862

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403863

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403864

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403865

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403866

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403867

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403868

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403869

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403870

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403871

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403872

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403873

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403874

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403875

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403876

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403877

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403878

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403879

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403880

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403881

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403882

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403883

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403884

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403885

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403886

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403887

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403888

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403889

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403890

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403891

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403892

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403893

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403894

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403895

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403896

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403897

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403898

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403899

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403900

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403901

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403902

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403903

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403904

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403905

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403906

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403907

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403908

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403909

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403910

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403911

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403912

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403913

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403914

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403915

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403916

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403917

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403918

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403919

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403920

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403921

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403922

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403923

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403924

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403925

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403926

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403927

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403928

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403929

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403930

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403931

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403932

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403933

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403934

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403935

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403936

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403937

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403938

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403939

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403940

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403941

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403942

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403943

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403944

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403945

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403946

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403947

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403948

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403949

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403950

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403951

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403952

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403953

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403954

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403955

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403956

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403957

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403958

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403959

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403960

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403961

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403962

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403963

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403964

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403965

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403966

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403967

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403968

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403969

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403970

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403971

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403972

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403973

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403974

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403975

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403976

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403977

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403978

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403979

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403980

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403981

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403982

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403983

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403984

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403985

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403986

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403987

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403988

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403989

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403990

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403991

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403992

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403993

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403994

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403995

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403996

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403997

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403998

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827403999

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404000

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404001

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404002

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404003

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404004

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404005

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404006

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404007

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404008

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404009

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404010

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404011

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404012

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404013

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404014

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404015

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404016

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404017

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404018

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404019

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404020

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404021

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404022

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404023

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404024

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404025

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404026

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404027

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404028

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404029

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404030

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404031

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404032

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404033

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404034

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404035

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404036

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404037

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404038

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404039

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404040

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404041

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404042

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404043

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404044

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404045

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404046

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404047

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404048

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404049

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404050

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404051

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404052

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404053

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404054

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404055

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404056

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404057

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404058

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404059

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404060

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404061

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404062

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404063

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404064

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404065

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404066

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404067

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404068

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404069

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404070

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404071

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404072

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404073

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404074

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404075

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404076

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404077

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404078

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404079

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404080

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404081

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404082

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404083

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404084

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404085

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404086

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404087

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404088

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404089

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404090

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404091

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404092

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404093

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404094

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404095

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404096

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404097

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404098

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404099

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404100

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404101

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404102

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404103

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404104

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404105

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404106

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404107

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404108

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404109

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404110

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404111

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404112

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404113

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404114

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404115

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404116

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404117

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404118

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404119

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404120

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404121

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404122

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404123

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404124

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404125

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404126

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404127

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404128

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404129

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404130

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404131

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404132

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404133

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404134

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404135

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404136

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404137

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404138

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404139

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404140

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404141

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404142

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404143

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404144

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404145

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404146

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404147

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404148

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404149

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404150

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404151

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404152

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404153

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404154

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404155

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404156

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404157

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404158

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404159

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404160

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404161

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404162

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404163

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404164

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404165

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404166

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404167

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404168

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404169

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404170

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404171

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404172

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404173

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404174

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404175

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404176

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404177

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404178

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404179

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404180

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404181

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404182

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404183

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404184

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404185

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404186

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404187

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404188

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404189

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404190

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404191

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404192

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404193

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404194

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404195

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404196

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404197

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404198

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404199

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404200

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404201

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404202

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404203

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404204

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404205

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404206

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404207

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404208

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404209

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404210

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404211

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404212

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404213

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404214

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404215

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404216

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404217

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404218

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404219

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404220

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404221

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404222

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404223

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404224

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404225

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404226

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404227

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404228

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404229

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404230

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404231

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404232

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404233

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404234

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404235

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404236

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404237

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404238

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404239

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404240

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404241

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404242

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404243

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404244

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404245

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404246

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404247

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404248

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404249

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404250

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404251

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404252

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404253

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404254

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404255

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404256

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404257

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404258

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404259

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404260

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404261

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404262

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404263

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404264

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404265

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404266

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404267

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404268

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404269

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404270

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404271

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404272

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404273

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404274

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404275

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404276

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404277

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404278

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404279

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 1827404280

Total PASSED: 1000
TEST SUCCESSFULLY COMPLETED

File 'randomtestcard1.c'
Lines executed:83.33% of 24
Creating 'randomtestcard1.c.gcov'

File 'dominion.c'
Lines executed:0.71% of 560
Branches executed:0.48% of 417
Taken at least once:0.24% of 417
Calls executed:0.00% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 0 returned 0% blocks executed 0%
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 never executed
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  215:    card = floor(Random() * state->deckCount[player]);
call    0 never executed
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 1000 returned 100% blocks executed 29%
     1000:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     1000:  280:  who = state->whoseTurn;
        -:  281:
     1000:  282:  if (state->numBuys < 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
     1000:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 0 returned 0% blocks executed 0%
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 never executed
branch  1 never executed
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 0 returned 0% blocks executed 0%
    #####:  646:int playAdventurer(struct gameState *state, int currentPlayer, int handPos){
    #####:  647:  int drawntreasure=0;
        -:  648:  int cardDrawn;
        -:  649:  int temphand[MAX_HAND];
    #####:  650:  int z=0;
    #####:  651:  while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  652:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
    #####:  655:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  656:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  657:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold ) //adding back the missing condition(gold) that Ken omitted
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  658:      drawntreasure++;
        -:  659:    else{
    #####:  660:      temphand[z]=cardDrawn;
    #####:  661:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  662:      z++;
        -:  663:    }
        -:  664:  }
    #####:  665:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  666:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  667:	  z=z-1;
        -:  668:  }
    #####:  669:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  670:  return 0;
        -:  671:}
        -:  672:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:  673:int playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  674:  //+3 Cards
        -:  675:  int i;
    #####:  676:  for (i = 0; i < 3; i++){
branch  0 never executed
branch  1 never executed
        -:  677:    //i=0;  Ken's bug, Fixing it by comment it out
    #####:  678:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  679:	}
        -:  680:			
        -:  681:  //discard card from hand
    #####:  682:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  683:  return 0;
        -:  684:}
        -:  685:
function playFeast called 0 returned 0% blocks executed 0%
    #####:  686:int playFeast(struct gameState *state, int currentPlayer, int handPos, int choice1){
        -:  687:  int i;
        -:  688:  int x;
        -:  689:  int temphand[MAX_HAND];
        -:  690:  //gain card with cost up to 5
        -:  691:  //Backup hand
    #####:  692:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  693:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  694:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  695:  }
        -:  696:  //Backup hand
        -:  697:
        -:  698:  //Update Coins for Buy
    #####:  699:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  700:  x = 1;//Condition to loop on
    #####:  701:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  702:	  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  703:	    if (DEBUG){ 
        -:  704:        printf("None of that card left, sorry!\n");
        -:  705:      }
        -:  706:	  if (DEBUG){
        -:  707:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  708:	  }
        -:  709:	}
    #####:  710:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  711:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  715:	  }
        -:  716:	}
        -:  717:	else{
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	  }
        -:  722:
    #####:  723:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  724:	  x = 0;//No more buying cards
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
        -:  730:	}
        -:  731:      }     
        -:  732:
        -:  733:      //Reset Hand
    #####:  734:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  735:	  state->hand[currentPlayer][i] = temphand[i];
    #####:  736:	  temphand[i] = -1;
        -:  737:  }
        -:  738:  //Reset Hand
        -:  739:      			
    #####:  740:  return 0;
        -:  741:}
        -:  742:
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####:  743:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos){
    #####:  744:  int i=0;
        -:  745:  //+4 Cards
    #####:  746:  for (i = 0; i < 4; i++){ drawCard(currentPlayer, state); }
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  747:  
        -:  748:  //+1 Buy
    #####:  749:  state->numBuys++;
        -:  750:  
        -:  751:  //Each other player draws a card
    #####:  752:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  753:	if( i != currentPlayer) //adding back the if statement that Ken ommitted 
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:    		drawCard(i, state);
call    0 never executed
        -:  756:	}
        -:  757:  }
        -:  758:  
        -:  759:  //put played card in played card pile
    #####:  760:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  761:  
    #####:  762:  return 0;
        -:  763:}
        -:  764:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  765:int playVillage(struct gameState *state, int currentPlayer, int handPos){
        -:  766:  //+1 Card
    #####:  767:  drawCard(currentPlayer, state);
call    0 never executed
        -:  768:  
        -:  769:  //+2 Actions
    #####:  770:  state->numActions = state->numActions + 2;
        -:  771:  
        -:  772:  //discard played card from hand
        -:  773:  //discardCard(handPos, currentPlayer, state, 0);
    #####:  774:  return 0;	
        -:  775:}
        -:  776:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  777:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  778:  int i;
        -:  779:  int j;
        -:  780:  int k;
        -:  781:  int x;
        -:  782:  int index;
    #####:  783:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  784:  int nextPlayer = currentPlayer + 1;
        -:  785:
    #####:  786:  int tributeRevealedCards[2] = {-1, -1};
        -:  787:  int temphand[MAX_HAND];// moved above the if statement
    #####:  788:  int drawntreasure=0;
        -:  789:  int cardDrawn;
    #####:  790:  int z = 0;// this is the counter for the temp hand
    #####:  791:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  792:    nextPlayer = 0;
        -:  793:  }
        -:  794:  
        -:  795:	
        -:  796:  //uses switch to select card and perform actions
    #####:  797:  switch( card ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  798:    case adventurer:
    #####:  799:      return playAdventurer(state, currentPlayer, handPos);
call    0 never executed
        -:  800:			
        -:  801:    case council_room:
    #####:  802:      return playCouncilRoom(state, currentPlayer, handPos);
call    0 never executed
        -:  803:			
        -:  804:    case feast:
    #####:  805:      return playFeast(state, currentPlayer, handPos, choice1);
call    0 never executed
        -:  806:			
        -:  807:    case gardens:
    #####:  808:      return -1;
        -:  809:			
        -:  810:    case mine:
    #####:  811:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  812:
    #####:  813:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  814:	{
    #####:  815:	  return -1;
        -:  816:	}
        -:  817:		
    #####:  818:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:
    #####:  823:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:
    #####:  828:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  829:
        -:  830:      //discard card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  832:
        -:  833:      //discard trashed card
    #####:  834:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	{
    #####:  836:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:	      break;
        -:  840:	    }
        -:  841:	}
        -:  842:			
    #####:  843:      return 0;
        -:  844:			
        -:  845:    case remodel:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  864:	      break;
        -:  865:	    }
        -:  866:	}
        -:  867:
        -:  868:
    #####:  869:      return 0;
        -:  870:		
        -:  871:    case smithy:
    #####:  872:      return playSmithy(state, currentPlayer, handPos);
call    0 never executed
        -:  873:		
        -:  874:    case village:
    #####:  875:      return playVillage(state, currentPlayer, handPos);
call    0 never executed
        -:  876:
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:		isGameOver(state);
call    0 never executed
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  920:	    isGameOver(state);
call    0 never executed
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case great_hall:
        -:  929:      //+1 Card
    #####:  930:      drawCard(currentPlayer, state);
call    0 never executed
        -:  931:			
        -:  932:      //+1 Actions
    #####:  933:      state->numActions++;
        -:  934:			
        -:  935:      //discard card from hand
    #####:  936:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  937:      return 0;
        -:  938:		
        -:  939:    case minion:
        -:  940:      //+1 action
    #####:  941:      state->numActions++;
        -:  942:			
        -:  943:      //discard card from hand
    #####:  944:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  945:			
    #####:  946:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  947:	{
    #####:  948:	  state->coins = state->coins + 2;
        -:  949:	}
        -:  950:			
    #####:  951:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  952:	{
        -:  953:	  //discard hand
    #####:  954:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  955:	    {
    #####:  956:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  957:	    }
        -:  958:				
        -:  959:	  //draw 4
    #####:  960:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  961:	    {
    #####:  962:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //other players discard hand and redraw if hand size > 4
    #####:  966:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  969:		{
    #####:  970:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  971:		    {
        -:  972:		      //discard hand
    #####:  973:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  974:			{
    #####:  975:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  976:			}
        -:  977:							
        -:  978:		      //draw 4
    #####:  979:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  drawCard(i, state);
call    0 never executed
        -:  982:			}
        -:  983:		    }
        -:  984:		}
        -:  985:	    }
        -:  986:				
        -:  987:	}
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case steward:
    #####:  991:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  992:	{
        -:  993:	  //+2 cards
    #####:  994:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  995:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  996:	}
    #####:  997:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 coins
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:      else
        -: 1003:	{
        -: 1004:	  //trash 2 cards in hand
    #####: 1005:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1006:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1007:	}
        -: 1008:			
        -: 1009:      //discard card from hand
    #####: 1010:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1015:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:	  state->deckCount[nextPlayer]--;
        -: 1018:	}
    #####: 1019:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1020:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:	  state->discardCount[nextPlayer]--;
        -: 1022:	}
        -: 1023:	else{
        -: 1024:	  //No Card to Reveal
        -: 1025:	  if (DEBUG){
        -: 1026:	    printf("No cards to reveal\n");
        -: 1027:	  }
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
        -: 1031:      else{
    #####: 1032:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1033:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1034:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:	    state->deckCount[nextPlayer]++;
    #####: 1036:	    state->discard[nextPlayer][i] = -1;
    #####: 1037:	    state->discardCount[nextPlayer]--;
        -: 1038:	  }
        -: 1039:			    
    #####: 1040:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1041:	} 
    #####: 1042:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:	state->deckCount[nextPlayer]--;
    #####: 1045:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:		       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1051:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:	state->playedCardCount++;
    #####: 1053:	tributeRevealedCards[1] = -1;
        -: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1058:	  state->coins += 2;
        -: 1059:	}
        -: 1060:		    
    #####: 1061:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1062:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1063:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1064:	}
        -: 1065:	else{//Action Card
    #####: 1066:	  state->numActions = state->numActions + 2;
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;		//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  return -1;
        -: 1083:	}
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
    #####: 1087:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1088:	    {
    #####: 1089:	      j++;
        -: 1090:	    }
        -: 1091:	}
    #####: 1092:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;				
        -: 1095:	}
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:			
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1107:	    {
    #####: 1108:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1123:		  break;
        -: 1124:		}
        -: 1125:	    }
        -: 1126:	}			
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1136:	    {
    #####: 1137:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1138:		{
    #####: 1139:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1140:		    {
    #####: 1141:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1142:		      break;
        -: 1143:		    }
    #####: 1144:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1145:		    {
    #####: 1146:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1147:			{
        -: 1148:			  if (DEBUG)
        -: 1149:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1150:			}	
    #####: 1151:		      break;
        -: 1152:		    }		
        -: 1153:		}
        -: 1154:					
        -: 1155:	    }
        -: 1156:				
        -: 1157:	}				
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:		
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:			
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1171:	{
    #####: 1172:	  return -1;
        -: 1173:	}
        -: 1174:			
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:			
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:			
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:			
    #####: 1194:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1195:	{
        -: 1196:	  //gain coins equal to trashed card
    #####: 1197:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1198:	  //trash card
    #####: 1199:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1200:	}
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1208:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1209:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:	  state->discardCount[i]++;
    #####: 1211:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:	}
        -: 1213:      }
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:	{
    #####: 1221:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1222:	    {
    #####: 1223:	      index = i;
    #####: 1224:	      break;
        -: 1225:	    }
        -: 1226:	}
    #####: 1227:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1228:	{
        -: 1229:	  //trash both treasure cards
    #####: 1230:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1231:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1232:
        -: 1233:	  //gain 4 Gold cards
    #####: 1234:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	    {
    #####: 1236:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1237:	    }
        -: 1238:				
        -: 1239:	  //return success
    #####: 1240:	  return 1;
        -: 1241:	}
        -: 1242:			
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:	
    #####: 1247:  return -1;
        -: 1248:}
        -: 1249:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:	
        -: 1253:  //if card is not trashed, added to Played pile 
    #####: 1254:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1255:    {
        -: 1256:      //add card to played pile
    #####: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:      state->playedCardCount++;
        -: 1259:    }
        -: 1260:	
        -: 1261:  //set played card to -1
    #####: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:	
        -: 1264:  //remove card from player's hand
    #####: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
    #####: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:  else 	
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
    #####: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
    #####: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:	
    #####: 1285:  return 0;
        -: 1286:}
        -: 1287:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:	
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
        -: 1312:    }
        -: 1313:  else
        -: 1314:    {
    #####: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //decrease number in supply pile
    #####: 1320:  state->supplyCount[supplyPos]--;
        -: 1321:	 
    #####: 1322:  return 0;
        -: 1323:}
        -: 1324:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:	
        -: 1329:  //reset coin count
    #####: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
    #####: 1333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1334:    {
    #####: 1335:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1336:	{
    #####: 1337:	  state->coins += 1;
        -: 1338:	}
    #####: 1339:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1340:	{
    #####: 1341:	  state->coins += 2;
        -: 1342:	}
    #####: 1343:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1344:	{
    #####: 1345:	  state->coins += 3;
        -: 1346:	}	
        -: 1347:    }	
        -: 1348:
        -: 1349:  //add bonus
    #####: 1350:  state->coins += bonus;
        -: 1351:
    #####: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
