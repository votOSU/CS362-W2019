Now Testing the buyCard() function:
Enough Coins?
No, we don't have enough to buy, test passed

TEST SUCCESSFULLY COMPLETED

Now Testing the fullDeckCount() function:
Test passed, deck is empty, same as 0 that was in the argument
Second test failed. Card type does not match.

TESTING FAILED

Now Testing isGameOver() Function:
Current supply count for province card is: 1
Test failed, 0 province card left, game over!
Current supply count for province card is: 0
Test passed, 0 province card left, game is over!

TESTING FAILED

Now Testing isGameOver() Function:
Test passed, number of Player is 0, game did not started correctly.

TEST SUCCESSFULLY COMPLETED


Now Testing the smithy card
Passed the Smithy card is in hand
Passed, have gained 3 cards.

TEST SUCCESSFULLY COMPLETED


Now Testing the smithy card
Passed, player have the village card
Passed, 2 actions gained.

TEST SUCCESSFULLY COMPLETED


Now Testing the adventure card
Passed, player have the adventure card
Passed, more cards are present

TEST SUCCESSFULLY COMPLETED


Now Testing the great hall card
Passed, player have the great hall card
Passed, 1 actions gained.

TEST SUCCESSFULLY COMPLETED

File 'dominion.c'
Lines executed:29.46% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       44:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
      100:  215:    card = floor(Random() * state->deckCount[player]);
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      345:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      245:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
        1:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        1:  280:  who = state->whoseTurn;
        -:  281:
        1:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        1:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        1:  320:int supplyCount(int card, struct gameState *state) {
        1:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
        9:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
        7:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
        7:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
        6:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
        4:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        2:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        2:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       24:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       32:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       32:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       32:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       32:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       32:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       32:  576:    state->deckCount[player]--;
       32:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       32:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        1:  646:int playAdventurer(struct gameState *state, int currentPlayer, int handPos){
        1:  647:  int drawntreasure=0;
        -:  648:  int cardDrawn;
        -:  649:  int temphand[MAX_HAND];
        1:  650:  int z=0;
        4:  651:  while(drawntreasure<2){
        2:  652:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:      shuffle(currentPlayer, state);
        -:  654:    }
        2:  655:    drawCard(currentPlayer, state);
        2:  656:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  657:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold ) //adding back the missing condition(gold) that Ken omitted
        2:  658:      drawntreasure++;
        -:  659:    else{
    #####:  660:      temphand[z]=cardDrawn;
    #####:  661:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  662:      z++;
        -:  663:    }
        -:  664:  }
        2:  665:  while(z-1>=0){
    #####:  666:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  667:	  z=z-1;
        -:  668:  }
        1:  669:  discardCard(handPos, currentPlayer, state, 0);
        1:  670:  return 0;
        -:  671:}
        -:  672:
        1:  673:int playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  674:  //+3 Cards
        -:  675:  int i;
        4:  676:  for (i = 0; i < 3; i++){
        -:  677:    //i=0;  Ken's bug, Fixing it by comment it out
        3:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:			
        -:  681:  //discard card from hand
        1:  682:  discardCard(handPos, currentPlayer, state, 0);
        1:  683:  return 0;
        -:  684:}
        -:  685:
    #####:  686:int playFeast(struct gameState *state, int currentPlayer, int handPos, int choice1){
        -:  687:  int i;
        -:  688:  int x;
        -:  689:  int temphand[MAX_HAND];
        -:  690:  //gain card with cost up to 5
        -:  691:  //Backup hand
    #####:  692:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  693:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  694:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  695:  }
        -:  696:  //Backup hand
        -:  697:
        -:  698:  //Update Coins for Buy
    #####:  699:  updateCoins(currentPlayer, state, 5);
    #####:  700:  x = 1;//Condition to loop on
    #####:  701:  while( x == 1) {//Buy one card
    #####:  702:	  if (supplyCount(choice1, state) <= 0){
        -:  703:	    if (DEBUG){ 
        -:  704:        printf("None of that card left, sorry!\n");
        -:  705:      }
        -:  706:	  if (DEBUG){
        -:  707:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  708:	  }
        -:  709:	}
    #####:  710:	else if (state->coins < getCost(choice1)){
    #####:  711:	  printf("That card is too expensive!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  715:	  }
        -:  716:	}
        -:  717:	else{
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	  }
        -:  722:
    #####:  723:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  724:	  x = 0;//No more buying cards
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
        -:  730:	}
        -:  731:      }     
        -:  732:
        -:  733:      //Reset Hand
    #####:  734:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  735:	  state->hand[currentPlayer][i] = temphand[i];
    #####:  736:	  temphand[i] = -1;
        -:  737:  }
        -:  738:  //Reset Hand
        -:  739:      			
    #####:  740:  return 0;
        -:  741:}
        -:  742:
    #####:  743:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos){
    #####:  744:  int i=0;
        -:  745:  //+4 Cards
    #####:  746:  for (i = 0; i < 4; i++){ drawCard(currentPlayer, state); }
        -:  747:  
        -:  748:  //+1 Buy
    #####:  749:  state->numBuys++;
        -:  750:  
        -:  751:  //Each other player draws a card
    #####:  752:  for (i = 0; i < state->numPlayers; i++){
    #####:  753:	if( i != currentPlayer) //adding back the if statement that Ken ommitted 
        -:  754:	{
    #####:  755:    		drawCard(i, state);
        -:  756:	}
        -:  757:  }
        -:  758:  
        -:  759:  //put played card in played card pile
    #####:  760:  discardCard(handPos, currentPlayer, state, 0);
        -:  761:  
    #####:  762:  return 0;
        -:  763:}
        -:  764:
        1:  765:int playVillage(struct gameState *state, int currentPlayer, int handPos){
        -:  766:  //+1 Card
        1:  767:  drawCard(currentPlayer, state);
        -:  768:  
        -:  769:  //+2 Actions
        1:  770:  state->numActions = state->numActions + 2;
        -:  771:  
        -:  772:  //discard played card from hand
        -:  773:  //discardCard(handPos, currentPlayer, state, 0);
        1:  774:  return 0;	
        -:  775:}
        -:  776:
        4:  777:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  778:  int i;
        -:  779:  int j;
        -:  780:  int k;
        -:  781:  int x;
        -:  782:  int index;
        4:  783:  int currentPlayer = whoseTurn(state);
        4:  784:  int nextPlayer = currentPlayer + 1;
        -:  785:
        4:  786:  int tributeRevealedCards[2] = {-1, -1};
        -:  787:  int temphand[MAX_HAND];// moved above the if statement
        4:  788:  int drawntreasure=0;
        -:  789:  int cardDrawn;
        4:  790:  int z = 0;// this is the counter for the temp hand
        4:  791:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  792:    nextPlayer = 0;
        -:  793:  }
        -:  794:  
        -:  795:	
        -:  796:  //uses switch to select card and perform actions
        4:  797:  switch( card ){
        -:  798:    case adventurer:
        1:  799:      return playAdventurer(state, currentPlayer, handPos);
        -:  800:			
        -:  801:    case council_room:
    #####:  802:      return playCouncilRoom(state, currentPlayer, handPos);
        -:  803:			
        -:  804:    case feast:
    #####:  805:      return playFeast(state, currentPlayer, handPos, choice1);
        -:  806:			
        -:  807:    case gardens:
    #####:  808:      return -1;
        -:  809:			
        -:  810:    case mine:
    #####:  811:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  812:
    #####:  813:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  814:	{
    #####:  815:	  return -1;
        -:  816:	}
        -:  817:		
    #####:  818:      if (choice2 > treasure_map || choice2 < curse)
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:
    #####:  823:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:
    #####:  828:      gainCard(choice2, state, 2, currentPlayer);
        -:  829:
        -:  830:      //discard card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:
        -:  833:      //discard trashed card
    #####:  834:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  835:	{
    #####:  836:	  if (state->hand[currentPlayer][i] == j)
        -:  837:	    {
    #####:  838:	      discardCard(i, currentPlayer, state, 0);			
    #####:  839:	      break;
        -:  840:	    }
        -:  841:	}
        -:  842:			
    #####:  843:      return 0;
        -:  844:			
        -:  845:    case remodel:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 0, currentPlayer);
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
    #####:  864:	      break;
        -:  865:	    }
        -:  866:	}
        -:  867:
        -:  868:
    #####:  869:      return 0;
        -:  870:		
        -:  871:    case smithy:
        1:  872:      return playSmithy(state, currentPlayer, handPos);
        -:  873:		
        -:  874:    case village:
        1:  875:      return playVillage(state, currentPlayer, handPos);
        -:  876:
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
    #####:  903:		isGameOver(state);
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
    #####:  920:	    isGameOver(state);
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case great_hall:
        -:  929:      //+1 Card
        1:  930:      drawCard(currentPlayer, state);
        -:  931:			
        -:  932:      //+1 Actions
        1:  933:      state->numActions++;
        -:  934:			
        -:  935:      //discard card from hand
        1:  936:      discardCard(handPos, currentPlayer, state, 0);
        1:  937:      return 0;
        -:  938:		
        -:  939:    case minion:
        -:  940:      //+1 action
    #####:  941:      state->numActions++;
        -:  942:			
        -:  943:      //discard card from hand
    #####:  944:      discardCard(handPos, currentPlayer, state, 0);
        -:  945:			
    #####:  946:      if (choice1)		//+2 coins
        -:  947:	{
    #####:  948:	  state->coins = state->coins + 2;
        -:  949:	}
        -:  950:			
    #####:  951:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  952:	{
        -:  953:	  //discard hand
    #####:  954:	  while(numHandCards(state) > 0)
        -:  955:	    {
    #####:  956:	      discardCard(handPos, currentPlayer, state, 0);
        -:  957:	    }
        -:  958:				
        -:  959:	  //draw 4
    #####:  960:	  for (i = 0; i < 4; i++)
        -:  961:	    {
    #####:  962:	      drawCard(currentPlayer, state);
        -:  963:	    }
        -:  964:				
        -:  965:	  //other players discard hand and redraw if hand size > 4
    #####:  966:	  for (i = 0; i < state->numPlayers; i++)
        -:  967:	    {
    #####:  968:	      if (i != currentPlayer)
        -:  969:		{
    #####:  970:		  if ( state->handCount[i] > 4 )
        -:  971:		    {
        -:  972:		      //discard hand
    #####:  973:		      while( state->handCount[i] > 0 )
        -:  974:			{
    #####:  975:			  discardCard(handPos, i, state, 0);
        -:  976:			}
        -:  977:							
        -:  978:		      //draw 4
    #####:  979:		      for (j = 0; j < 4; j++)
        -:  980:			{
    #####:  981:			  drawCard(i, state);
        -:  982:			}
        -:  983:		    }
        -:  984:		}
        -:  985:	    }
        -:  986:				
        -:  987:	}
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case steward:
    #####:  991:      if (choice1 == 1)
        -:  992:	{
        -:  993:	  //+2 cards
    #####:  994:	  drawCard(currentPlayer, state);
    #####:  995:	  drawCard(currentPlayer, state);
        -:  996:	}
    #####:  997:      else if (choice1 == 2)
        -:  998:	{
        -:  999:	  //+2 coins
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:      else
        -: 1003:	{
        -: 1004:	  //trash 2 cards in hand
    #####: 1005:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1006:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1007:	}
        -: 1008:			
        -: 1009:      //discard card from hand
    #####: 1010:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:	if (state->deckCount[nextPlayer] > 0){
    #####: 1016:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:	  state->deckCount[nextPlayer]--;
        -: 1018:	}
    #####: 1019:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:	  state->discardCount[nextPlayer]--;
        -: 1022:	}
        -: 1023:	else{
        -: 1024:	  //No Card to Reveal
        -: 1025:	  if (DEBUG){
        -: 1026:	    printf("No cards to reveal\n");
        -: 1027:	  }
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
        -: 1031:      else{
    #####: 1032:	if (state->deckCount[nextPlayer] == 0){
    #####: 1033:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:	    state->deckCount[nextPlayer]++;
    #####: 1036:	    state->discard[nextPlayer][i] = -1;
    #####: 1037:	    state->discardCount[nextPlayer]--;
        -: 1038:	  }
        -: 1039:			    
    #####: 1040:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1041:	} 
    #####: 1042:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:	state->deckCount[nextPlayer]--;
    #####: 1045:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:		       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:	state->playedCardCount++;
    #####: 1053:	tributeRevealedCards[1] = -1;
        -: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:	  state->coins += 2;
        -: 1059:	}
        -: 1060:		    
    #####: 1061:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:	  drawCard(currentPlayer, state);
    #####: 1063:	  drawCard(currentPlayer, state);
        -: 1064:	}
        -: 1065:	else{//Action Card
    #####: 1066:	  state->numActions = state->numActions + 2;
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;		//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:	{
    #####: 1082:	  return -1;
        -: 1083:	}
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:	{
    #####: 1087:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:	    {
    #####: 1089:	      j++;
        -: 1090:	    }
        -: 1091:	}
    #####: 1092:      if (j < choice2)
        -: 1093:	{
    #####: 1094:	  return -1;				
        -: 1095:	}
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:			
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:	{
    #####: 1106:	  if (i != currentPlayer)
        -: 1107:	    {
    #####: 1108:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:	{
    #####: 1118:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:	    {
    #####: 1120:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:		{
    #####: 1122:		  discardCard(i, currentPlayer, state, 1);
    #####: 1123:		  break;
        -: 1124:		}
        -: 1125:	    }
        -: 1126:	}			
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:	{
    #####: 1135:	  if (i != currentPlayer)
        -: 1136:	    {
    #####: 1137:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1138:		{
    #####: 1139:		  if (state->hand[i][j] == copper)
        -: 1140:		    {
    #####: 1141:		      discardCard(j, i, state, 0);
    #####: 1142:		      break;
        -: 1143:		    }
    #####: 1144:		  if (j == state->handCount[i])
        -: 1145:		    {
    #####: 1146:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1147:			{
        -: 1148:			  if (DEBUG)
        -: 1149:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1150:			}	
    #####: 1151:		      break;
        -: 1152:		    }		
        -: 1153:		}
        -: 1154:					
        -: 1155:	    }
        -: 1156:				
        -: 1157:	}				
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:		
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:			
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:	{
    #####: 1172:	  return -1;
        -: 1173:	}
        -: 1174:			
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:			
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:			
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:			
    #####: 1194:      if (choice1)
        -: 1195:	{
        -: 1196:	  //gain coins equal to trashed card
    #####: 1197:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:	  //trash card
    #####: 1199:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:	}
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:	if (i != currentPlayer){
    #####: 1209:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:	  state->discardCount[i]++;
    #####: 1211:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:	}
        -: 1213:      }
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:	{
    #####: 1221:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:	    {
    #####: 1223:	      index = i;
    #####: 1224:	      break;
        -: 1225:	    }
        -: 1226:	}
    #####: 1227:      if (index > -1)
        -: 1228:	{
        -: 1229:	  //trash both treasure cards
    #####: 1230:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:	  discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:	  //gain 4 Gold cards
    #####: 1234:	  for (i = 0; i < 4; i++)
        -: 1235:	    {
    #####: 1236:	      gainCard(gold, state, 1, currentPlayer);
        -: 1237:	    }
        -: 1238:				
        -: 1239:	  //return success
    #####: 1240:	  return 1;
        -: 1241:	}
        -: 1242:			
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:	
    #####: 1247:  return -1;
        -: 1248:}
        -: 1249:
        3: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:	
        -: 1253:  //if card is not trashed, added to Played pile 
        3: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
        3: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1258:      state->playedCardCount++;
        -: 1259:    }
        -: 1260:	
        -: 1261:  //set played card to -1
        3: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:	
        -: 1264:  //remove card from player's hand
        3: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
        1: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        2: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:  else 	
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
        2: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
        2: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
        2: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:	
        3: 1285:  return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:	
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
        -: 1312:    }
        -: 1313:  else
        -: 1314:    {
    #####: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //decrease number in supply pile
    #####: 1320:  state->supplyCount[supplyPos]--;
        -: 1321:	 
    #####: 1322:  return 0;
        -: 1323:}
        -: 1324:
        5: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:	
        -: 1329:  //reset coin count
        5: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
       30: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
       25: 1335:      if (state->hand[player][i] == copper)
        -: 1336:	{
       20: 1337:	  state->coins += 1;
        -: 1338:	}
        5: 1339:      else if (state->hand[player][i] == silver)
        -: 1340:	{
    #####: 1341:	  state->coins += 2;
        -: 1342:	}
        5: 1343:      else if (state->hand[player][i] == gold)
        -: 1344:	{
    #####: 1345:	  state->coins += 3;
        -: 1346:	}	
        -: 1347:    }	
        -: 1348:
        -: 1349:  //add bonus
        5: 1350:  state->coins += bonus;
        -: 1351:
        5: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
File 'dominion.c'
Lines executed:29.46% of 560
Branches executed:30.94% of 417
Taken at least once:21.34% of 417
Calls executed:20.00% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 150 returned 100% blocks executed 83%
      150:    8:int compare(const void* a, const void* b) {
      150:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      150:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       40:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 89%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
call    0 returned 100%
        6:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       44:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 10 returned 100% blocks executed 94%
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      345:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      245:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 1 returned 100% blocks executed 43%
        1:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        1:  280:  who = state->whoseTurn;
        -:  281:
        1:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        1:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1 returned 100% blocks executed 100%
        1:  320:int supplyCount(int card, struct gameState *state) {
        1:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 2 returned 100% blocks executed 100%
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        2:  326:  int count = 0;
        -:  327:
        9:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  329:    {
        7:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  331:    }
        -:  332:
        7:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  334:    {
        5:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  336:    }
        -:  337:
        6:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  339:    {
        4:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  341:    }
        -:  342:
        2:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 2 returned 100% blocks executed 91%
        2:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        2:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
        -:  405:	{
       24:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 32 returned 100% blocks executed 38%
       32:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       32:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       32:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       32:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       32:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       32:  576:    state->deckCount[player]--;
       32:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       32:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 1 returned 100% blocks executed 69%
        1:  646:int playAdventurer(struct gameState *state, int currentPlayer, int handPos){
        1:  647:  int drawntreasure=0;
        -:  648:  int cardDrawn;
        -:  649:  int temphand[MAX_HAND];
        1:  650:  int z=0;
        4:  651:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  652:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  653:      shuffle(currentPlayer, state);
call    0 never executed
        -:  654:    }
        2:  655:    drawCard(currentPlayer, state);
call    0 returned 100%
        2:  656:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  657:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold ) //adding back the missing condition(gold) that Ken omitted
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  658:      drawntreasure++;
        -:  659:    else{
    #####:  660:      temphand[z]=cardDrawn;
    #####:  661:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  662:      z++;
        -:  663:    }
        -:  664:  }
        2:  665:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  666:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  667:	  z=z-1;
        -:  668:  }
        1:  669:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  670:  return 0;
        -:  671:}
        -:  672:
function playSmithy called 1 returned 100% blocks executed 100%
        1:  673:int playSmithy(struct gameState *state, int currentPlayer, int handPos){
        -:  674:  //+3 Cards
        -:  675:  int i;
        4:  676:  for (i = 0; i < 3; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  677:    //i=0;  Ken's bug, Fixing it by comment it out
        3:  678:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  679:	}
        -:  680:			
        -:  681:  //discard card from hand
        1:  682:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  683:  return 0;
        -:  684:}
        -:  685:
function playFeast called 0 returned 0% blocks executed 0%
    #####:  686:int playFeast(struct gameState *state, int currentPlayer, int handPos, int choice1){
        -:  687:  int i;
        -:  688:  int x;
        -:  689:  int temphand[MAX_HAND];
        -:  690:  //gain card with cost up to 5
        -:  691:  //Backup hand
    #####:  692:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  693:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  694:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  695:  }
        -:  696:  //Backup hand
        -:  697:
        -:  698:  //Update Coins for Buy
    #####:  699:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  700:  x = 1;//Condition to loop on
    #####:  701:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  702:	  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  703:	    if (DEBUG){ 
        -:  704:        printf("None of that card left, sorry!\n");
        -:  705:      }
        -:  706:	  if (DEBUG){
        -:  707:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  708:	  }
        -:  709:	}
    #####:  710:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  711:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  715:	  }
        -:  716:	}
        -:  717:	else{
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  721:	  }
        -:  722:
    #####:  723:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  724:	  x = 0;//No more buying cards
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
        -:  730:	}
        -:  731:      }     
        -:  732:
        -:  733:      //Reset Hand
    #####:  734:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  735:	  state->hand[currentPlayer][i] = temphand[i];
    #####:  736:	  temphand[i] = -1;
        -:  737:  }
        -:  738:  //Reset Hand
        -:  739:      			
    #####:  740:  return 0;
        -:  741:}
        -:  742:
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####:  743:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos){
    #####:  744:  int i=0;
        -:  745:  //+4 Cards
    #####:  746:  for (i = 0; i < 4; i++){ drawCard(currentPlayer, state); }
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  747:  
        -:  748:  //+1 Buy
    #####:  749:  state->numBuys++;
        -:  750:  
        -:  751:  //Each other player draws a card
    #####:  752:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  753:	if( i != currentPlayer) //adding back the if statement that Ken ommitted 
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:    		drawCard(i, state);
call    0 never executed
        -:  756:	}
        -:  757:  }
        -:  758:  
        -:  759:  //put played card in played card pile
    #####:  760:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  761:  
    #####:  762:  return 0;
        -:  763:}
        -:  764:
function playVillage called 1 returned 100% blocks executed 100%
        1:  765:int playVillage(struct gameState *state, int currentPlayer, int handPos){
        -:  766:  //+1 Card
        1:  767:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  768:  
        -:  769:  //+2 Actions
        1:  770:  state->numActions = state->numActions + 2;
        -:  771:  
        -:  772:  //discard played card from hand
        -:  773:  //discardCard(handPos, currentPlayer, state, 0);
        1:  774:  return 0;	
        -:  775:}
        -:  776:
function cardEffect called 4 returned 100% blocks executed 5%
        4:  777:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  778:  int i;
        -:  779:  int j;
        -:  780:  int k;
        -:  781:  int x;
        -:  782:  int index;
        4:  783:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  784:  int nextPlayer = currentPlayer + 1;
        -:  785:
        4:  786:  int tributeRevealedCards[2] = {-1, -1};
        -:  787:  int temphand[MAX_HAND];// moved above the if statement
        4:  788:  int drawntreasure=0;
        -:  789:  int cardDrawn;
        4:  790:  int z = 0;// this is the counter for the temp hand
        4:  791:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  792:    nextPlayer = 0;
        -:  793:  }
        -:  794:  
        -:  795:	
        -:  796:  //uses switch to select card and perform actions
        4:  797:  switch( card ){
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  798:    case adventurer:
        1:  799:      return playAdventurer(state, currentPlayer, handPos);
call    0 returned 100%
        -:  800:			
        -:  801:    case council_room:
    #####:  802:      return playCouncilRoom(state, currentPlayer, handPos);
call    0 never executed
        -:  803:			
        -:  804:    case feast:
    #####:  805:      return playFeast(state, currentPlayer, handPos, choice1);
call    0 never executed
        -:  806:			
        -:  807:    case gardens:
    #####:  808:      return -1;
        -:  809:			
        -:  810:    case mine:
    #####:  811:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  812:
    #####:  813:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  814:	{
    #####:  815:	  return -1;
        -:  816:	}
        -:  817:		
    #####:  818:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:
    #####:  823:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:
    #####:  828:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  829:
        -:  830:      //discard card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  832:
        -:  833:      //discard trashed card
    #####:  834:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	{
    #####:  836:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  839:	      break;
        -:  840:	    }
        -:  841:	}
        -:  842:			
    #####:  843:      return 0;
        -:  844:			
        -:  845:    case remodel:
    #####:  846:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  864:	      break;
        -:  865:	    }
        -:  866:	}
        -:  867:
        -:  868:
    #####:  869:      return 0;
        -:  870:		
        -:  871:    case smithy:
        1:  872:      return playSmithy(state, currentPlayer, handPos);
call    0 returned 100%
        -:  873:		
        -:  874:    case village:
        1:  875:      return playVillage(state, currentPlayer, handPos);
call    0 returned 100%
        -:  876:
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:		isGameOver(state);
call    0 never executed
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  920:	    isGameOver(state);
call    0 never executed
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case great_hall:
        -:  929:      //+1 Card
        1:  930:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  931:			
        -:  932:      //+1 Actions
        1:  933:      state->numActions++;
        -:  934:			
        -:  935:      //discard card from hand
        1:  936:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  937:      return 0;
        -:  938:		
        -:  939:    case minion:
        -:  940:      //+1 action
    #####:  941:      state->numActions++;
        -:  942:			
        -:  943:      //discard card from hand
    #####:  944:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  945:			
    #####:  946:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  947:	{
    #####:  948:	  state->coins = state->coins + 2;
        -:  949:	}
        -:  950:			
    #####:  951:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  952:	{
        -:  953:	  //discard hand
    #####:  954:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  955:	    {
    #####:  956:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  957:	    }
        -:  958:				
        -:  959:	  //draw 4
    #####:  960:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  961:	    {
    #####:  962:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  963:	    }
        -:  964:				
        -:  965:	  //other players discard hand and redraw if hand size > 4
    #####:  966:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  967:	    {
    #####:  968:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  969:		{
    #####:  970:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  971:		    {
        -:  972:		      //discard hand
    #####:  973:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  974:			{
    #####:  975:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  976:			}
        -:  977:							
        -:  978:		      //draw 4
    #####:  979:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  980:			{
    #####:  981:			  drawCard(i, state);
call    0 never executed
        -:  982:			}
        -:  983:		    }
        -:  984:		}
        -:  985:	    }
        -:  986:				
        -:  987:	}
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case steward:
    #####:  991:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  992:	{
        -:  993:	  //+2 cards
    #####:  994:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  995:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  996:	}
    #####:  997:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  998:	{
        -:  999:	  //+2 coins
    #####: 1000:	  state->coins = state->coins + 2;
        -: 1001:	}
        -: 1002:      else
        -: 1003:	{
        -: 1004:	  //trash 2 cards in hand
    #####: 1005:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1006:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1007:	}
        -: 1008:			
        -: 1009:      //discard card from hand
    #####: 1010:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1015:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:	  state->deckCount[nextPlayer]--;
        -: 1018:	}
    #####: 1019:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1020:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:	  state->discardCount[nextPlayer]--;
        -: 1022:	}
        -: 1023:	else{
        -: 1024:	  //No Card to Reveal
        -: 1025:	  if (DEBUG){
        -: 1026:	    printf("No cards to reveal\n");
        -: 1027:	  }
        -: 1028:	}
        -: 1029:      }
        -: 1030:	    
        -: 1031:      else{
    #####: 1032:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1033:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1034:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:	    state->deckCount[nextPlayer]++;
    #####: 1036:	    state->discard[nextPlayer][i] = -1;
    #####: 1037:	    state->discardCount[nextPlayer]--;
        -: 1038:	  }
        -: 1039:			    
    #####: 1040:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1041:	} 
    #####: 1042:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:	state->deckCount[nextPlayer]--;
    #####: 1045:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:		       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1051:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:	state->playedCardCount++;
    #####: 1053:	tributeRevealedCards[1] = -1;
        -: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1057:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1058:	  state->coins += 2;
        -: 1059:	}
        -: 1060:		    
    #####: 1061:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1062:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1063:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1064:	}
        -: 1065:	else{//Action Card
    #####: 1066:	  state->numActions = state->numActions + 2;
        -: 1067:	}
        -: 1068:      }
        -: 1069:	    
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;		//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  return -1;
        -: 1083:	}
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
    #####: 1087:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1088:	    {
    #####: 1089:	      j++;
        -: 1090:	    }
        -: 1091:	}
    #####: 1092:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;				
        -: 1095:	}
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:			
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1107:	    {
    #####: 1108:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1109:	    }
        -: 1110:	}
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1123:		  break;
        -: 1124:		}
        -: 1125:	    }
        -: 1126:	}			
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1136:	    {
    #####: 1137:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1138:		{
    #####: 1139:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1140:		    {
    #####: 1141:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1142:		      break;
        -: 1143:		    }
    #####: 1144:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1145:		    {
    #####: 1146:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1147:			{
        -: 1148:			  if (DEBUG)
        -: 1149:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1150:			}	
    #####: 1151:		      break;
        -: 1152:		    }		
        -: 1153:		}
        -: 1154:					
        -: 1155:	    }
        -: 1156:				
        -: 1157:	}				
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:		
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:			
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1171:	{
    #####: 1172:	  return -1;
        -: 1173:	}
        -: 1174:			
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:			
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:			
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1188:      return 0;
        -: 1189:		
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:			
    #####: 1194:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1195:	{
        -: 1196:	  //gain coins equal to trashed card
    #####: 1197:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1198:	  //trash card
    #####: 1199:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1200:	}
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1208:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1209:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:	  state->discardCount[i]++;
    #####: 1211:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:	}
        -: 1213:      }
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:	{
    #####: 1221:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1222:	    {
    #####: 1223:	      index = i;
    #####: 1224:	      break;
        -: 1225:	    }
        -: 1226:	}
    #####: 1227:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1228:	{
        -: 1229:	  //trash both treasure cards
    #####: 1230:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1231:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1232:
        -: 1233:	  //gain 4 Gold cards
    #####: 1234:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	    {
    #####: 1236:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1237:	    }
        -: 1238:				
        -: 1239:	  //return success
    #####: 1240:	  return 1;
        -: 1241:	}
        -: 1242:			
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:	
    #####: 1247:  return -1;
        -: 1248:}
        -: 1249:
function discardCard called 3 returned 100% blocks executed 89%
        3: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:	
        -: 1253:  //if card is not trashed, added to Played pile 
        3: 1254:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1255:    {
        -: 1256:      //add card to played pile
        3: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1258:      state->playedCardCount++;
        -: 1259:    }
        -: 1260:	
        -: 1261:  //set played card to -1
        3: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:	
        -: 1264:  //remove card from player's hand
        3: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
        1: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        2: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:  else 	
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
        2: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
        2: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
        2: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:	
        3: 1285:  return 0;
        -: 1286:}
        -: 1287:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:	
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
        -: 1312:    }
        -: 1313:  else
        -: 1314:    {
    #####: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //decrease number in supply pile
    #####: 1320:  state->supplyCount[supplyPos]--;
        -: 1321:	 
    #####: 1322:  return 0;
        -: 1323:}
        -: 1324:
function updateCoins called 5 returned 100% blocks executed 82%
        5: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:	
        -: 1329:  //reset coin count
        5: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
       30: 1333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1334:    {
       25: 1335:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1336:	{
       20: 1337:	  state->coins += 1;
        -: 1338:	}
        5: 1339:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1340:	{
    #####: 1341:	  state->coins += 2;
        -: 1342:	}
        5: 1343:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1344:	{
    #####: 1345:	  state->coins += 3;
        -: 1346:	}	
        -: 1347:    }	
        -: 1348:
        -: 1349:  //add bonus
        5: 1350:  state->coins += bonus;
        -: 1351:
        5: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
