Now Testing the buyCard() function:

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079297

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079298

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079299

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079300

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079301

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079302

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079303

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079304

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079305

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079306

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079307

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079308

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079309

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079310

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079311

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079312

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079313

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079314

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079315

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079316

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079317

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079318

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079319

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079320

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079321

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079322

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079323

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079324

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079325

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079326

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079327

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079328

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079329

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079330

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079331

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079332

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079333

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079334

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079335

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079336

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079337

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079338

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079339

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079340

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079341

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079342

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079343

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079344

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079345

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079346

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079347

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079348

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079349

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079350

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079351

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079352

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079353

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079354

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079355

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079356

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079357

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079358

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079359

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079360

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079361

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079362

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079363

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079364

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079365

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079366

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079367

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079368

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079369

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079370

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079371

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079372

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079373

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079374

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079375

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079376

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079377

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079378

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079379

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079380

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079381

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079382

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079383

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079384

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079385

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079386

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079387

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079388

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079389

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079390

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079391

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079392

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079393

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079394

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079395

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079396

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079397

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079398

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079399

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079400

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079401

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079402

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079403

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079404

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079405

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079406

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079407

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079408

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079409

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079410

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079411

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079412

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079413

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079414

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079415

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079416

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079417

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079418

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079419

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079420

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079421

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079422

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079423

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079424

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079425

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079426

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079427

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079428

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079429

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079430

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079431

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079432

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079433

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079434

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079435

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079436

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079437

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079438

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079439

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079440

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079441

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079442

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079443

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079444

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079445

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079446

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079447

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079448

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079449

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079450

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079451

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079452

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079453

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079454

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079455

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079456

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079457

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079458

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079459

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079460

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079461

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079462

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079463

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079464

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079465

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079466

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079467

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079468

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079469

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079470

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079471

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079472

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079473

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079474

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079475

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079476

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079477

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079478

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079479

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079480

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079481

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079482

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079483

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079484

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079485

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079486

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079487

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079488

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079489

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079490

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079491

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079492

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079493

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079494

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079495

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079496

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079497

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079498

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079499

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079500

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079501

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079502

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079503

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079504

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079505

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079506

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079507

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079508

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079509

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079510

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079511

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079512

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079513

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079514

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079515

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079516

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079517

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079518

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079519

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079520

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079521

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079522

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079523

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079524

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079525

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079526

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079527

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079528

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079529

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079530

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079531

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079532

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079533

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079534

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079535

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079536

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079537

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079538

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079539

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079540

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079541

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079542

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079543

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079544

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079545

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079546

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079547

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079548

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079549

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079550

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079551

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079552

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079553

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079554

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079555

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079556

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079557

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079558

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079559

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079560

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079561

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079562

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079563

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079564

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079565

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079566

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079567

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079568

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079569

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079570

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079571

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079572

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079573

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079574

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079575

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079576

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079577

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079578

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079579

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079580

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079581

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079582

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079583

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079584

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079585

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079586

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079587

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079588

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079589

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079590

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079591

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079592

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079593

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079594

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079595

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079596

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079597

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079598

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079599

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079600

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079601

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079602

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079603

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079604

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079605

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079606

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079607

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079608

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079609

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079610

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079611

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079612

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079613

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079614

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079615

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079616

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079617

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079618

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079619

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079620

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079621

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079622

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079623

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079624

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079625

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079626

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079627

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079628

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079629

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079630

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079631

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079632

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079633

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079634

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079635

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079636

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079637

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079638

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079639

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079640

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079641

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079642

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079643

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079644

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079645

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079646

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079647

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079648

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079649

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079650

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079651

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079652

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079653

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079654

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079655

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079656

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079657

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079658

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079659

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079660

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079661

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079662

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079663

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079664

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079665

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079666

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079667

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079668

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079669

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079670

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079671

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079672

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079673

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079674

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079675

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079676

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079677

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079678

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079679

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079680

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079681

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079682

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079683

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079684

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079685

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079686

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079687

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079688

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079689

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079690

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079691

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079692

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079693

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079694

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079695

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079696

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079697

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079698

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079699

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079700

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079701

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079702

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079703

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079704

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079705

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079706

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079707

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079708

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079709

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079710

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079711

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079712

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079713

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079714

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079715

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079716

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079717

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079718

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079719

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079720

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079721

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079722

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079723

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079724

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079725

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079726

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079727

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079728

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079729

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079730

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079731

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079732

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079733

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079734

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079735

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079736

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079737

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079738

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079739

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079740

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079741

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079742

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079743

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079744

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079745

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079746

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079747

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079748

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079749

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079750

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079751

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079752

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079753

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079754

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079755

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079756

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079757

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079758

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079759

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079760

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079761

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079762

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079763

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079764

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079765

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079766

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079767

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079768

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079769

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079770

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079771

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079772

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079773

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079774

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079775

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079776

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079777

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079778

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079779

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079780

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079781

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079782

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079783

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079784

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079785

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079786

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079787

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079788

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079789

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079790

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079791

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079792

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079793

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079794

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079795

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079796

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079797

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079798

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079799

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079800

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079801

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079802

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079803

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079804

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079805

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079806

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079807

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079808

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079809

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079810

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079811

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079812

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079813

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079814

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079815

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079816

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079817

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079818

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079819

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079820

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079821

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079822

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079823

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079824

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079825

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079826

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079827

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079828

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079829

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079830

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079831

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079832

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079833

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079834

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079835

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079836

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079837

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079838

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079839

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079840

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079841

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079842

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079843

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079844

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079845

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079846

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079847

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079848

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079849

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079850

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079851

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079852

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079853

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079854

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079855

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079856

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079857

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079858

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079859

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079860

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079861

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079862

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079863

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079864

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079865

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079866

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079867

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079868

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079869

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079870

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079871

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079872

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079873

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079874

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079875

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079876

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079877

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079878

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079879

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079880

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079881

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079882

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079883

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079884

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079885

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079886

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079887

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079888

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079889

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079890

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079891

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079892

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079893

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079894

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079895

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079896

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079897

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079898

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079899

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079900

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079901

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079902

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079903

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079904

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079905

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079906

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079907

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079908

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079909

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079910

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079911

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079912

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079913

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079914

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079915

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079916

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079917

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079918

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079919

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079920

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079921

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079922

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079923

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079924

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079925

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079926

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079927

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079928

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079929

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079930

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079931

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079932

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079933

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079934

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079935

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079936

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079937

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079938

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079939

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079940

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079941

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079942

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079943

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079944

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079945

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079946

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079947

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079948

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079949

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079950

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079951

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079952

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079953

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079954

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079955

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079956

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079957

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079958

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079959

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079960

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079961

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079962

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079963

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079964

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079965

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079966

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079967

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079968

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079969

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079970

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079971

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079972

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079973

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079974

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079975

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079976

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079977

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079978

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079979

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079980

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079981

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079982

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079983

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079984

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079985

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079986

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079987

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079988

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079989

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079990

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079991

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079992

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079993

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079994

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079995

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079996

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079997

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079998

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095079999

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080000

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080001

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080002

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080003

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080004

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080005

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080006

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080007

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080008

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080009

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080010

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080011

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080012

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080013

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080014

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080015

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080016

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080017

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080018

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080019

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080020

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080021

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080022

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080023

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080024

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080025

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080026

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080027

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080028

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080029

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080030

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080031

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080032

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080033

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080034

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080035

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080036

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080037

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080038

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080039

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080040

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080041

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080042

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080043

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080044

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080045

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080046

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080047

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080048

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080049

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080050

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080051

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080052

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080053

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080054

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080055

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080056

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080057

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080058

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080059

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080060

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080061

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080062

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080063

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080064

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080065

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080066

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080067

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080068

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080069

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080070

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080071

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080072

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080073

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080074

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080075

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080076

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080077

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080078

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080079

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080080

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080081

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080082

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080083

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080084

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080085

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080086

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080087

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080088

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080089

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080090

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080091

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080092

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080093

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080094

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080095

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080096

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080097

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080098

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080099

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080100

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080101

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080102

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080103

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080104

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080105

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080106

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080107

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080108

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080109

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080110

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080111

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080112

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080113

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080114

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080115

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080116

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080117

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080118

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080119

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080120

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080121

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080122

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080123

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080124

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080125

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080126

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080127

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080128

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080129

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080130

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080131

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080132

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080133

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080134

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080135

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080136

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080137

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080138

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080139

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080140

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080141

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080142

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080143

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080144

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080145

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080146

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080147

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080148

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080149

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080150

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080151

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080152

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080153

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080154

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080155

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080156

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080157

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080158

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080159

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080160

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080161

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080162

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080163

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080164

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080165

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080166

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080167

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080168

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080169

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080170

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080171

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080172

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080173

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080174

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080175

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080176

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080177

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080178

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080179

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080180

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080181

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080182

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080183

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080184

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080185

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080186

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080187

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080188

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080189

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080190

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080191

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080192

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080193

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080194

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080195

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080196

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080197

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080198

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080199

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080200

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080201

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080202

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080203

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080204

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080205

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080206

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080207

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080208

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080209

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080210

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080211

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080212

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080213

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080214

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080215

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080216

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080217

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080218

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080219

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080220

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080221

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080222

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080223

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080224

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080225

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080226

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080227

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080228

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080229

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080230

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080231

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080232

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080233

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080234

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080235

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080236

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080237

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080238

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080239

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080240

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080241

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080242

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080243

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080244

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080245

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080246

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080247

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080248

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080249

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080250

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080251

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080252

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080253

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080254

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080255

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080256

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080257

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080258

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080259

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080260

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080261

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080262

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080263

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080264

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080265

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080266

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080267

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080268

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080269

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080270

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080271

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080272

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080273

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080274

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080275

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080276

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080277

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080278

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080279

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080280

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080281

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080282

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080283

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080284

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080285

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080286

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080287

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080288

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080289

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080290

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080291

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080292

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080293

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080294

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080295

Enough Coins?
No, we don't have enough to buy, test PASSED
Loop Count: 2095080296

Total PASSED: 1000
TEST SUCCESSFULLY COMPLETED

File 'randomtestcard1.c'
Lines executed:83.33% of 24
Creating 'randomtestcard1.c.gcov'

File 'dominion.c'
Lines executed:0.70% of 570
Branches executed:0.48% of 417
Taken at least once:0.24% of 417
Calls executed:0.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 0 returned 0% blocks executed 0%
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 0 returned 0% blocks executed 0%
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 never executed
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  215:    card = floor(Random() * state->deckCount[player]);
call    0 never executed
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 1000 returned 100% blocks executed 29%
     1000:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     1000:  280:  who = state->whoseTurn;
        -:  281:
     1000:  282:  if (state->numBuys < 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
     1000:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 0 returned 0% blocks executed 0%
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 never executed
branch  1 never executed
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:     /* while(drawntreasure<2){
        -:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  672:	  shuffle(currentPlayer, state);
        -:  673:	}
        -:  674:	drawCard(currentPlayer, state);
        -:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  677:	  drawntreasure++;
        -:  678:	else{
        -:  679:	  temphand[z]=cardDrawn;
        -:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  681:	  z++;
        -:  682:	}
        -:  683:      }
        -:  684:      while(z-1>=0){
        -:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  686:	z=z-1;
        -:  687:      }*/
    #####:  688:	adventurerRefactor(state); //calling the rafactoring function 
call    0 never executed
    #####:  689:      return 0;
        -:  690:			
        -:  691:    case council_room:
        -:  692:      //+4 Cards
        -:  693:      /*for (i = 0; i < 4; i++)
        -:  694:	{
        -:  695:	  drawCard(currentPlayer, state);
        -:  696:	}
        -:  697:			
        -:  698:      //+1 Buy
        -:  699:      state->numBuys++;
        -:  700:			
        -:  701:      //Each other player draws a card
        -:  702:      for (i = 0; i < state->numPlayers; i++)
        -:  703:	{
        -:  704:	  if ( i != currentPlayer )
        -:  705:	    {
        -:  706:	      drawCard(i, state);
        -:  707:	    }
        -:  708:	}
        -:  709:			
        -:  710:      //put played card in played card pile
        -:  711:      discardCard(handPos, currentPlayer, state, 0);*/
    #####:  712:	council_roomRefactor(state, handPos);		
call    0 never executed
    #####:  713:      return 0;
        -:  714:			
        -:  715:    case feast:
        -:  716:      //gain card with cost up to 5
        -:  717:      //Backup hand
    #####:  718:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  719:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  720:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  721:      }
        -:  722:      //Backup hand
        -:  723:
        -:  724:      //Update Coins for Buy
    #####:  725:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  726:      x = 1;//Condition to loop on
    #####:  727:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  728:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  729:	  if (DEBUG)
        -:  730:	    printf("None of that card left, sorry!\n");
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  734:	  }
        -:  735:	}
    #####:  736:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  737:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  741:	  }
        -:  742:	}
        -:  743:	else{
        -:  744:
        -:  745:	  if (DEBUG){
        -:  746:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:	  }
        -:  748:
    #####:  749:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  750:	  x = 0;//No more buying cards
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  754:	  }
        -:  755:
        -:  756:	}
        -:  757:      }     
        -:  758:
        -:  759:      //Reset Hand
    #####:  760:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  761:	state->hand[currentPlayer][i] = temphand[i];
    #####:  762:	temphand[i] = -1;
        -:  763:      }
        -:  764:      //Reset Hand
        -:  765:      			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case gardens:
    #####:  769:      return -1;
        -:  770:			
        -:  771:    case mine:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:		
    #####:  779:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  780:	{
    #####:  781:	  return -1;
        -:  782:	}
        -:  783:
    #####:  784:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:
    #####:  789:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  790:
        -:  791:      //discard card from hand
    #####:  792:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  793:
        -:  794:      //discard trashed card
    #####:  795:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  798:	    {
    #####:  799:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  800:	      break;
        -:  801:	    }
        -:  802:	}
        -:  803:			
    #####:  804:      return 0;
        -:  805:			
        -:  806:    case remodel:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:
    #####:  814:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  815:
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  818:
        -:  819:      //discard trashed card
    #####:  820:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  823:	    {
    #####:  824:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  825:	      break;
        -:  826:	    }
        -:  827:	}
        -:  828:
        -:  829:
    #####:  830:      return 0;
        -:  831:		
        -:  832:    case smithy:
        -:  833:      //+3 Cards
        -:  834:     /* for (i = 0; i < 3; i++)
        -:  835:	{
        -:  836:	  drawCard(currentPlayer, state);
        -:  837:	}
        -:  838:			
        -:  839:      //discard card from hand
        -:  840:      discardCard(handPos, currentPlayer, state, 0);*/
    #####:  841:	smithyRefactor(state, handPos);
call    0 never executed
    #####:  842:      return 0;
        -:  843:		
        -:  844:    case village:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
call    0 never executed
        -:  847:			
        -:  848:      //+2 Actions
    #####:  849:      state->numActions = state->numActions + 2;
        -:  850:			
        -:  851:      //discard played card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  853:      return 0;
        -:  854:		
        -:  855:    case baron:
    #####:  856:      state->numBuys++;//Increase buys by 1!
    #####:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
        -:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  881:		isGameOver(state);
call    0 never executed
        -:  882:	      }
        -:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
        -:  885:	  }
        -:  886:			    
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:			    
        -:  893:      else{
    #####:  894:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  896:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  897:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  898:	    isGameOver(state);
call    0 never executed
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:	    
        -:  903:      
    #####:  904:      return 0;
        -:  905:		
        -:  906:    case great_hall:
        -:  907:      //+1 Card
        -:  908:      /*drawCard(currentPlayer, state);
        -:  909:			
        -:  910:      //+1 Actions
        -:  911:      state->numActions++;
        -:  912:			
        -:  913:      //discard card from hand
        -:  914:      discardCard(handPos, currentPlayer, state, 0);*/
    #####:  915:	great_hallRefactor(state, handPos);
call    0 never executed
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case minion:
        -:  919:      //+1 action
    #####:  920:      state->numActions++;
        -:  921:			
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  924:			
    #####:  925:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  926:	{
    #####:  927:	  state->coins = state->coins + 2;
        -:  928:	}
        -:  929:			
    #####:  930:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  931:	{
        -:  932:	  //discard hand
    #####:  933:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  934:	    {
    #####:  935:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  936:	    }
        -:  937:				
        -:  938:	  //draw 4
    #####:  939:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  942:	    }
        -:  943:				
        -:  944:	  //other players discard hand and redraw if hand size > 4
    #####:  945:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  946:	    {
    #####:  947:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  948:		{
    #####:  949:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  950:		    {
        -:  951:		      //discard hand
    #####:  952:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  953:			{
    #####:  954:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  955:			}
        -:  956:							
        -:  957:		      //draw 4
    #####:  958:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  959:			{
    #####:  960:			  drawCard(i, state);
call    0 never executed
        -:  961:			}
        -:  962:		    }
        -:  963:		}
        -:  964:	    }
        -:  965:				
        -:  966:	}
    #####:  967:      return 0;
        -:  968:		
        -:  969:    case steward:
    #####:  970:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  971:	{
        -:  972:	  //+2 cards
    #####:  973:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  974:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  975:	}
    #####:  976:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  977:	{
        -:  978:	  //+2 coins
    #####:  979:	  state->coins = state->coins + 2;
        -:  980:	}
        -:  981:      else
        -:  982:	{
        -:  983:	  //trash 2 cards in hand
    #####:  984:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  985:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  986:	}
        -:  987:			
        -:  988:      //discard card from hand
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  990:      return 0;
        -:  991:		
        -:  992:    case tribute:
    #####:  993:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  994:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  995:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  996:	  state->deckCount[nextPlayer]--;
        -:  997:	}
    #####:  998:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1000:	  state->discardCount[nextPlayer]--;
        -: 1001:	}
        -: 1002:	else{
        -: 1003:	  //No Card to Reveal
        -: 1004:	  if (DEBUG){
        -: 1005:	    printf("No cards to reveal\n");
        -: 1006:	  }
        -: 1007:	}
        -: 1008:      }
        -: 1009:	    
        -: 1010:      else{
    #####: 1011:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1012:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1013:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1014:	    state->deckCount[nextPlayer]++;
    #####: 1015:	    state->discard[nextPlayer][i] = -1;
    #####: 1016:	    state->discardCount[nextPlayer]--;
        -: 1017:	  }
        -: 1018:			    
    #####: 1019:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1020:	} 
    #####: 1021:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
    #####: 1024:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1025:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1026:	state->deckCount[nextPlayer]--;
        -: 1027:      }    
        -: 1028:		       
    #####: 1029:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1030:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1031:	state->playedCardCount++;
    #####: 1032:	tributeRevealedCards[1] = -1;
        -: 1033:      }
        -: 1034:
    #####: 1035:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1036:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1037:	  state->coins += 2;
        -: 1038:	}
        -: 1039:		    
    #####: 1040:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1041:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1042:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1043:	}
        -: 1044:	else{//Action Card
    #####: 1045:	  state->numActions = state->numActions + 2;
        -: 1046:	}
        -: 1047:      }
        -: 1048:	    
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case ambassador:
    #####: 1052:      j = 0;		//used to check if player has enough cards to discard
        -: 1053:
    #####: 1054:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1055:	{
    #####: 1056:	  return -1;				
        -: 1057:	}
        -: 1058:
    #####: 1059:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1065:	{
    #####: 1066:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1067:	    {
    #####: 1068:	      j++;
        -: 1069:	    }
        -: 1070:	}
    #####: 1071:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
    #####: 1073:	  return -1;				
        -: 1074:	}
        -: 1075:
        -: 1076:      if (DEBUG) 
        -: 1077:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1078:
        -: 1079:      //increase supply count for choosen card by amount being discarded
    #####: 1080:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1081:			
        -: 1082:      //each other player gains a copy of revealed card
    #####: 1083:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1086:	    {
    #####: 1087:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1088:	    }
        -: 1089:	}
        -: 1090:
        -: 1091:      //discard played card from hand
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1093:
        -: 1094:      //trash copies of cards returned to supply
    #####: 1095:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1098:	    {
    #####: 1099:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1100:		{
    #####: 1101:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1102:		  break;
        -: 1103:		}
        -: 1104:	    }
        -: 1105:	}			
        -: 1106:
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case cutpurse:
        -: 1110:
    #####: 1111:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1112:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1119:		    {
    #####: 1120:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1121:		      break;
        -: 1122:		    }
    #####: 1123:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1124:		    {
    #####: 1125:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1126:			{
        -: 1127:			  if (DEBUG)
        -: 1128:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1129:			}	
    #####: 1130:		      break;
        -: 1131:		    }		
        -: 1132:		}
        -: 1133:					
        -: 1134:	    }
        -: 1135:				
        -: 1136:	}				
        -: 1137:
        -: 1138:      //discard played card from hand
    #####: 1139:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1140:
    #####: 1141:      return 0;
        -: 1142:
        -: 1143:		
        -: 1144:    case embargo: 
        -: 1145:      //+2 Coins
        -: 1146:     /* state->coins = state->coins + 2;
        -: 1147:			
        -: 1148:      //see if selected pile is in play
        -: 1149:      if ( state->supplyCount[choice1] == -1 )
        -: 1150:	{
        -: 1151:	  return -1;
        -: 1152:	}
        -: 1153:			
        -: 1154:      //add embargo token to selected supply pile
        -: 1155:      state->embargoTokens[choice1]++;
        -: 1156:			
        -: 1157:      //trash card
        -: 1158:      discardCard(handPos, currentPlayer, state, 1);*/
    #####: 1159:	embargoRefactor(choice1, state, handPos);		
call    0 never executed
    #####: 1160:      return 0;
        -: 1161:		
        -: 1162:    case outpost:
        -: 1163:      //set outpost flag
    #####: 1164:      state->outpostPlayed++;
        -: 1165:			
        -: 1166:      //discard card
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case salvager:
        -: 1171:      //+1 buy
    #####: 1172:      state->numBuys++;
        -: 1173:			
    #####: 1174:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1175:	{
        -: 1176:	  //gain coins equal to trashed card
    #####: 1177:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1178:	  //trash card
    #####: 1179:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1180:	}
        -: 1181:			
        -: 1182:      //discard card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case sea_hag:
    #####: 1187:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1188:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1189:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1190:	  state->discardCount[i]++;
    #####: 1191:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1192:	}
        -: 1193:      }
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case treasure_map:
        -: 1197:      //search hand for another treasure_map
    #####: 1198:      index = -1;
    #####: 1199:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1202:	    {
    #####: 1203:	      index = i;
    #####: 1204:	      break;
        -: 1205:	    }
        -: 1206:	}
    #####: 1207:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1208:	{
        -: 1209:	  //trash both treasure cards
    #####: 1210:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1211:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1212:
        -: 1213:	  //gain 4 Gold cards
    #####: 1214:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1215:	    {
    #####: 1216:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1217:	    }
        -: 1218:				
        -: 1219:	  //return success
    #####: 1220:	  return 1;
        -: 1221:	}
        -: 1222:			
        -: 1223:      //no second treasure_map found in hand
    #####: 1224:      return -1;
        -: 1225:    }
        -: 1226:	
    #####: 1227:  return -1;
        -: 1228:}
        -: 1229:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1230:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1231:{
        -: 1232:	
        -: 1233:  //if card is not trashed, added to Played pile 
    #####: 1234:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1235:    {
        -: 1236:      //add card to played pile
    #####: 1237:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1238:      state->playedCardCount++;
        -: 1239:    }
        -: 1240:	
        -: 1241:  //set played card to -1
    #####: 1242:  state->hand[currentPlayer][handPos] = -1;
        -: 1243:	
        -: 1244:  //remove card from player's hand
    #####: 1245:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
    #####: 1250:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1251:    {
        -: 1252:      //reduce number of cards in hand
    #####: 1253:      state->handCount[currentPlayer]--;
        -: 1254:    }
        -: 1255:  else 	
        -: 1256:    {
        -: 1257:      //replace discarded card with last card in hand
    #####: 1258:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1259:      //set last card to -1
    #####: 1260:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1261:      //reduce number of cards in hand
    #####: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return 0;
        -: 1266:}
        -: 1267:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1268:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1269:{
        -: 1270:  //Note: supplyPos is enum of choosen card
        -: 1271:	
        -: 1272:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1273:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1274:    {
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:	
        -: 1278:  //added card for [whoseTurn] current player:
        -: 1279:  // toFlag = 0 : add to discard
        -: 1280:  // toFlag = 1 : add to deck
        -: 1281:  // toFlag = 2 : add to hand
        -: 1282:
    #####: 1283:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1286:      state->deckCount[player]++;
        -: 1287:    }
    #####: 1288:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1289:    {
    #####: 1290:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1291:      state->handCount[player]++;
        -: 1292:    }
        -: 1293:  else
        -: 1294:    {
    #####: 1295:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1296:      state->discardCount[player]++;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //decrease number in supply pile
    #####: 1300:  state->supplyCount[supplyPos]--;
        -: 1301:	 
    #####: 1302:  return 0;
        -: 1303:}
        -: 1304:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1305:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1306:{
        -: 1307:  int i;
        -: 1308:	
        -: 1309:  //reset coin count
    #####: 1310:  state->coins = 0;
        -: 1311:
        -: 1312:  //add coins for each Treasure card in player's hand
    #####: 1313:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1314:    {
    #####: 1315:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1316:	{
    #####: 1317:	  state->coins += 1;
        -: 1318:	}
    #####: 1319:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1320:	{
    #####: 1321:	  state->coins += 2;
        -: 1322:	}
    #####: 1323:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1324:	{
    #####: 1325:	  state->coins += 3;
        -: 1326:	}	
        -: 1327:    }	
        -: 1328:
        -: 1329:  //add bonus
    #####: 1330:  state->coins += bonus;
        -: 1331:
    #####: 1332:  return 0;
        -: 1333:}
        -: 1334:
        -: 1335:/*** REFACTOR SECTION ***/
        -: 1336:
function adventurerRefactor called 0 returned 0% blocks executed 0%
    #####: 1337:int adventurerRefactor(struct gameState *state)
        -: 1338:{
    #####: 1339:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1340:  int temphand[MAX_HAND];
    #####: 1341:  int drawntreasure=0;
        -: 1342:  int cardDrawn;
    #####: 1343:  int z = 0;  // counter 
        -: 1344:
    #####: 1345:  while(drawntreasure<1) /******** BUG introducing  <1 instead of origin <2*********/
branch  0 never executed
branch  1 never executed
        -: 1346:  {   
    #####: 1347:    if (state->deckCount[currentPlayer] <1)
branch  0 never executed
branch  1 never executed
        -: 1348:	{//if the deck is empty we need to shuffle discard and add to deck
        -: 1349:
    #####: 1350:	  shuffle(currentPlayer, state);
call    0 never executed
        -: 1351:
        -: 1352:	}
    #####: 1353:	drawCard(currentPlayer, state);
call    0 never executed
    #####: 1354:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1355:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1356:
    #####: 1357:	  drawntreasure++;
        -: 1358:
        -: 1359:	else
        -: 1360:	{
    #####: 1361:	  temphand[z]=cardDrawn;
    #####: 1362:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1363:	  z++;
        -: 1364:	}
        -: 1365:  }
    #####: 1366:  while(z-1>=0)
branch  0 never executed
branch  1 never executed
        -: 1367:  {
    #####: 1368:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1369:	z=z-1;
        -: 1370:  }
    #####: 1371:  return 0;
        -: 1372:}
        -: 1373:
function smithyRefactor called 0 returned 0% blocks executed 0%
    #####: 1374:int smithyRefactor(struct gameState *state, int handPos)
        -: 1375:{
        -: 1376:	int i;
    #####: 1377:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1378:  	//+3 Cards
    #####: 1379:  	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1380:  	{
    #####: 1381:  		drawCard(currentPlayer, state);
call    0 never executed
        -: 1382:  	}
    #####: 1383:	discardCard(handPos, currentPlayer, state, 1);    /******** BUG introducing  1 instead of origin 0 *********/
call    0 never executed
    #####: 1384:  	return 0;
        -: 1385:}
        -: 1386:
        -: 1387:
function council_roomRefactor called 0 returned 0% blocks executed 0%
    #####: 1388:int council_roomRefactor(struct gameState *state, int handPos)
        -: 1389:{
        -: 1390:	int i;
    #####: 1391:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1392:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1393:	{
    #####: 1394:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1395:	}
        -: 1396: 	 //+1 Buy
    #####: 1397: 	state->numBuys++;
        -: 1398:  	  //Each other player draws a card
    #####: 1399:    	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1400:  	{
    #####: 1401:  		if ( i == currentPlayer )  /******** BUG introducing  == instead of origin != *********/
branch  0 never executed
branch  1 never executed
        -: 1402:  		{
    #####: 1403:  			drawCard(i, state);
call    0 never executed
        -: 1404:  		}
        -: 1405:  	}
        -: 1406:	//put played card in played card pile
    #####: 1407:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1408:	return 0;
        -: 1409:}
        -: 1410:
        -: 1411:
function great_hallRefactor called 0 returned 0% blocks executed 0%
    #####: 1412:int great_hallRefactor(struct gameState *state, int handPos)
        -: 1413:{     
    #####: 1414:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1415:	//+1 Card
    #####: 1416:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1417:	     			
        -: 1418:	     //+1 Actions
    #####: 1419:        state->numActions++;
        -: 1420:	    			            			
        -: 1421:	      //discard card from hand
    #####: 1422:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1423:        return 0;
        -: 1424:}
        -: 1425:
function embargoRefactor called 0 returned 0% blocks executed 0%
    #####: 1426:int embargoRefactor(int choice1, struct gameState *state, int handPos)
        -: 1427:{      
    #####: 1428:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1429:	state->coins = state->coins + 1; /******** BUG introducing  1 instead of origin 2 *********/
        -: 1430:			
        -: 1431:      //see if selected pile is in play
    #####: 1432:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1433:      {
    #####: 1434:      		  return -1;
        -: 1435:      }
        -: 1436:           		  				
        -: 1437:	    //add embargo token to selected supply pile
    #####: 1438:      state->embargoTokens[choice1]++;
        -: 1439:     		  				            			
        -: 1440:	    //trash card
    #####: 1441:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1442:      return 0;
        -: 1443:}
        -: 1444:
        -: 1445:
        -: 1446://end of dominion.c
        -: 1447:
